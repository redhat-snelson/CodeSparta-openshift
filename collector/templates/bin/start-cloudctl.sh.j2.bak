#!/bin/bash
# Konductor.sh
#   Author: kmorgan@redhat.com
# About:
#   Build and start CloudCtl AirGap OpenShift Deployment Pod from a Koffer Bundle
################################################################################
# Base Logging
run_log () {
  if   [[ $1 == 0 ]]; then
    echo "   $2"
  elif [[ $1 == 1 ]]; then
    echo "   FATAL: $2"
    echo "Aborting!"
    exit 1
  fi
}

################################################################################
# Verify Bundle Integrity & Launch
if [[ ! -f /root/deploy/nginx/release.txt ]]; then
  run_log 0 "Verifying SHA256SUM: ArtifactsBundle.tar.xz"

  sha256sum --check ArtifactsBundle.tar.xz.sha256 \
    || run_log 1 "SHA Verify Failed!"

  tar -xv -C /root -f /root/ArtifactsBundle.tar.xz && rm -rf ArtifactsBundle.tar.xz ArtifactsBundle.tar.xz.sha256
fi

################################################################################
# Konductor Initialization & Prerequisites
################################################################################
# Working Variables
k9DirDeploy="${HOME}/deploy"
varVerOpenshift="$(cat /root/deploy/nginx/release.txt)"

################################################################################
# Stage ansible variables
run_stage_deploy_variables () {
echo && run_log 0 "Staging Ansible ${k9DirDeploy}/ansible/cluster-vars.yml variables file"
cat <<EOF | tee ${k9DirDeploy}/ansible/cluster-vars.yml
---
version_openshift: "${varVerOpenshift}"
target_environment: "${k9TargetEnvironment}"
name_cluster_vpc: "${k9NameVpc}"
cluster_domain: "${k9ClusterDomain}"
cluster_name: "${k9NameCluster}"
name_domain: "${k9NameDomain}"
EOF
cat <<EOF | tee ${k9DirDeploy}/release.txt
${varVerOpenshift}
EOF
echo
}

################################################################################
# One Time Artifact Environment Staging
run_init_stage () {
# Stage environment variables
mkdir -p ${k9DirDeploy}/config
cat <<EOF > ${k9DirDeploy}/config/environment
export k9DirDeploy="\${HOME}/deploy"
export versOCP="${versOCP}"
export k9NameVpc="${k9NameVpc}"
export k9NameDomain="${k9NameDomain}"
export k9NameCluster="${k9NameCluster}"
export k9ClusterDomain="${k9ClusterDomain}"
export k9DirCluster="${k9DirCluster}"
EOF
}

################################################################################
# Write Self Signed Certificate & Key
run_log 0 "Staging optional registry node self signed certificates"
write_self_signed_cert () {
openssl req \
  -x509 \
  -nodes \
  -sha256 \
  -days   3650 \
  -newkey rsa:4096 \
  -subj   "/CN=${k9ClusterDomain}" \
  -out    /root/deploy/secrets/registry/ssl/registry.crt  \
  -keyout /root/deploy/secrets/registry/ssl/registry.key  \
  -addext "subjectAltName=DNS:registry.${k9ClusterDomain},DNS:cloudctl,DNS:registry,DNS:localhost,IP:10.88.0.1,IP:127.0.0.1" 2>&1 1>/dev/null
}

################################################################################
# Prompt user for aws keys
usr_prompt_aws_keys () {
  clear && echo
  run_log 0 "AWS GovCloud IAM Credentials Web Panel:" ;
  run_log 0 "  https://console.amazonaws-us-gov.com/iam/home#/security_credentials" ;
  echo
  run_log 0 "AWS Commercial IAM Security Credentials Web Panel:" ; 
  run_log 0 "  https://console.aws.amazon.com/iam/home#/security_credentials" ; 
  echo
  run_log 0 "Click on 'Create access key'"
  # Prompt user to paste secret
  echo
  read  -rp "    >> Please copy/paste your AWS 'Access Key ID': " access_KEYID;
  read -srp "    >> Please copy/paste your AWS 'Secret Access Key' (Secret is masked): " access_KEYSECRET;

mkdir -p ${k9DirDeploy}/secrets/aws
cat <<EOF > ${k9DirDeploy}/secrets/aws/credentials
; https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
[default]
aws_access_key_id = ${access_KEYID}
aws_secret_access_key = ${access_KEYSECRET}
EOF
}

################################################################################
# One Time Artifact Environment Staging
run_init_usr_prompt () {
  # Verify Information
  prompt_verify () {
    echo " 
    Artifact Environment Variables:
      Target Environment: ${k9TargetEnvironment}
      VPC Name:           ${k9NameVpc}
      Cluster Domain:     ${k9ClusterDomain}
      Cluster Name:       ${k9NameCluster}
      Base Domain:        ${k9NameDomain}
    "

  while true; do
    read -p "    Please confirm these details are correct (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "User Confirmed. Continuing ..." ;
	      break
	      ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
  }

  # Prompt user for AWS VPC Name
  prompt_k9NameVpc () {
    read -p '
    Please enter your AWS VPC name: ' k9NameVpc
  }

  # Prompt user for AWS VPC Name
  prompt_k9NameCluster () {
  echo "
    Please enter a cluster name which will be prepended to the Base Domain
    This is a unique and arbitrary name which will be appended as a subdomain.
      Example entry:
        cluster
      Which would prepend to become:
        cluster.cloud.com
        cluster.anchovy.dev"
  read -p '    Cluster Name: ' k9NameCluster
  k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"
  k9DirCluster="${k9DirDeploy}/cluster"
  }

  # Prompt user for Base Domain Name
  prompt_k9NameDomain () {
  echo "
    Please enter a base domain name for this environment
    This may be an arbitrary local only domain, or a domain you own the rights to.
      Example:
      Example:             
        cloud.com
        anchovy.dev"
  read -p '    Base Domain : ' k9NameDomain ;
  }

  # Prompt User for Target Environment
  prompt_k9TargetEnvironment () {
  echo "
    Please Declare your target environment from the supported list:
    Supported Environments:
      - fences
      - govcloud
"
  read -p '    Target Environment: ' k9TargetEnvironment;
  }

  # Call subroutines
  sub_run () {
    clear && echo
    prompt_k9TargetEnvironment
    prompt_k9NameDomain
    prompt_k9NameCluster
    prompt_k9NameVpc
    prompt_verify
  }
sub_run
}

################################################################################
# User Introduction
run_info () {
clear
run_log 0 "
    Welcome to the ContainerOne OpenShift Artifact Prep Utility.
    This will walk you through your OpenShift on AWS prerequisites:

    External Requirements:

      AWS Admin Credentials:
          GovCloud Credentials:
            @ https://console.amazonaws-us-gov.com/iam/home#/security_credentials
          Commercial Credentials:
            @ https://console.aws.amazon.com/iam/home#/security_credentials

"
  while true; do
    read -p "    Are you ready to continue? (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "Continuing ..." ;
	      break ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
}

# Function call order
run_discover () {
  run_info
  run_init_usr_prompt
  run_init_stage
  usr_prompt_aws_keys 
  write_self_signed_cert 
  run_stage_deploy_variables
}
run_discover


################################################################################
# CloudCtl Pod Startup
################################################################################

runUser="$USER"
p1DirImages=${HOME}/deploy/images

sudo chown -R ${runUser}:${runUser} ${HOME}/deploy
sudo mkdir -p /root/deploy/nginx
sudo chmod -R 0777 ${HOME}/deploy/nginx
################################################################################
# Option Run Ansible Playbook
run_ansible_playbook_bundle () {
while true; do
  read -rp "    >> Would you like to deploy your cluster now? (yes/no): " yn
    case $yn in
      [Yy]* ) echo ;
	      run_log 0 "Executing ansible playbook ${runAnsibleCmd}" ; 
              clear;
              podman exec -it one /bin/bash -c 'cd /root/deploy/ansible/deploy ; ./site.yml' ;
              break
              ;;
      [Nn]* ) run_log 0 " >> Exiting now, thank you!" ;
	      break
              ;;
          * ) echo "$SEP_2 Please answer yes or no." ;;
    esac
  break
done
echo
}


run_clean () {
  for container in $(podman ps | awk '/konductor|one|nginx|registry|pause|busybox/{print $3}' 2>/dev/null); do
    podman rm --force $container
  done
  for pod in $(podman pod ps | awk '/cloudctl/{print $1}' 2>/dev/null); do
    podman pod rm --force $pod
  done
  for image in $(podman images | awk '/konductor|one|nginx|registry|pause|busybox/{print $3}' 2>/dev/null); do
    podman rmi --force $image
  done
}

load_images () {
  for image in $(ls ${p1DirImages}/*.tar); do
    echo "  >> Loading Image: ${image}"
    sudo podman load -i ${image}
  done
  echo "  >> Cloudctl Images Loaded Successfully."
}

load_mirror_certificate () {
# echo "  >> Loading registry certificate to host."
mkdir -p /root/deploy/secrets/registry/ssl \
cp /root/deploy/secrets/registry/ssl/registry.crt \
    /etc/pki/ca-trust/source/anchors/registry.crt \
  && sudo update-ca-trust
}

run_pod () {
  echo "  >> Starting CloudCtl Pod."
  podman play kube ./cloudctl.yml
}

run_core () {
  run_clean
  load_images
  load_mirror_certificate
  run_pod
}

test_core () {
  
  echo "  >> Testing NGINX Ignition Service"
  ignTest=$(curl -s http://localhost:8080/release.txt 2>&1 1>/dev/null ; echo $?)
  [[ ! ${ignTest} == '0' ]] \
      && echo "  >> NGINX Ignition Delivery Service Failed!" \
      || echo "  >> NGINX Ignition Delivery Service Online."

  echo "  >> Testing Docker Registry:2 Service"
  sleep 3
  ignTest=$(curl -u cloudctl:cloudctl -k https://localhost:5000/v2/_catalog 2>&1 1>/dev/null ; echo $?)
  [[ ${ignTest} == '0' ]] \
      && echo "  >> Registry Service Failed!" \
      || echo "  >> Registry Service Online. Catalog: $(curl -s -u cloudctl:cloudctl -k https://localhost:5000/v2/_catalog)"
  echo
  echo "  >> List Pods & Containers"
  podman pod ps
  podman ps --all
  echo
}

run () {
run_core
test_core
run_ansible_playbook_bundle
sleep 2
podman restart nginx
}
run
